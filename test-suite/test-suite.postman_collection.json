{
	"info": {
		"_postman_id": "11fd7c50-cec8-495a-b927-4a49a68f9738",
		"name": "PingDataGovernance - Sideband Adapter Tests",
		"description": "## Overview\n\nThis test suite ensures that both the PingDataGovernance Sideband API and third-party Sideband adapter are working correctly. The tests are divided into 2 folders:\n\n* Sideband API - When pointed against a correctly configured PingDataGovernance Server, the tests in this folder simulate the requests that a third-party Sideband adapter would make. Note that these tests are for sanity checking and might not pass when run from a server that cannot reach the PingDataGovernance Server.\n* Third-party sideband adapter - When pointed against an API gateway with a correctly implemented third-party sideband adapter, the tests in this folder make HTTP requests against the API gateway and check for expectations within the responses.\n\n## Usage\n\nMake sure that the following test variables are properly set:\n\n| Name | Default value | Description | \n| ---- | ------------- | ----------- |\n| `backend-base-url` | `http://localhost:6443` | The URL of the backend REST API (smart-hub-application). |\n| `gateway-base-url` | `http://localhost:8080` | The base URL of third-party Sideband adapter's API gateway. |\n| `pdg-base-url` | `https://localhost:7443` | The base URL of the PingDataGovernance Server.  |\n\nThen run the test suite.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sideband API",
			"item": [
				{
					"name": "Should correctly relay client request headers in inbound requests",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "PDG-TOKEN",
								"type": "text",
								"value": "{{pdg-sideband-secret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"source_ip\": \"::1\",\n    \"source_port\": 12345,\n    \"method\": \"GET\",\n    \"url\": \"{{backend-base-url}}/homes\",\n    \"http_version\": \"1.1\",\n    \"headers\": [\n        {\n            \"Authorization\": \"Bearer {\\\"active\\\":true,\\\"sub\\\":\\\"{{known-user-id}}\\\"}\"\n        },\n        {\n            \"X-App-Id\": \"{{app-id}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pdg-base-url}}/sideband/request",
							"host": [
								"{{pdg-base-url}}"
							],
							"path": [
								"sideband",
								"request"
							]
						},
						"description": "The test policies `DENY` client requests that are missing an `X-App-Id` header. This test makes a simple `GET` request with that header to make sure the sideband adapter correctly transforms client request headers when fetching inbound decisions from PingDataGovernance."
					},
					"response": []
				},
				{
					"name": "Should correctly include backend response headers in outbound decision request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d94c87ec-0762-4928-ac38-85cd08f7eeba",
								"exec": [
									"pm.test(\"X-Powered-By has been removed by policy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.headers.reduce(function(acc, header) { return Object.keys(header)[0] === \"X-Powered-By\" ? true : acc }, false)).eq(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "PDG-TOKEN",
								"type": "text",
								"value": "{{pdg-sideband-secret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"response_code\": 200,\n    \"response_status\": \"OK\",\n    \"method\": \"GET\",\n    \"url\": \"{{backend-base-url}}/devices\",\n    \"http_version\": \"1.1\",\n    \"headers\": [\n        {\n            \"Authorization\": \"Bearer {\\\"active\\\":true,\\\"sub\\\":\\\"{{known-user-id}}\\\"}\"\n        },\n        {\n            \"X-Powered-By\": \"SmartHub Server Supreme\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pdg-base-url}}/sideband/response",
							"host": [
								"{{pdg-base-url}}"
							],
							"path": [
								"sideband",
								"response"
							]
						},
						"description": "The policies remove the `X-Powered-By` header returned by the backend API. This test retrieves a list of devices to make sure that the sideband adapter correctly relays response headers when requesting outbound decisions from PingDataGovernance."
					},
					"response": []
				},
				{
					"name": "Should correctly transform client query string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed32685a-9bb3-4eeb-a2c7-7b856382510a",
								"exec": [
									"pm.test(\"Backend URL contains transformed query string\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.url.indexOf(\"compare=co\") !== -1).eq(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "PDG-TOKEN",
								"type": "text",
								"value": "{{pdg-sideband-secret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"source_ip\": \"::1\",\n    \"source_port\": 12345,\n    \"method\": \"GET\",\n    \"url\": \"{{backend-base-url}}/devices?name=sedan&operator=contains\",\n    \"http_version\": \"1.1\",\n    \"headers\": [\n        {\n            \"Authorization\": \"Bearer {\\\"active\\\":true,\\\"sub\\\":\\\"{{known-user-id}}\\\"}\"\n        },\n        {\n            \"X-App-Id\": \"SAS\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pdg-base-url}}/sideband/request",
							"host": [
								"{{pdg-base-url}}"
							],
							"path": [
								"sideband",
								"request"
							]
						},
						"description": "The test policies convert incoming query strings to the format used by the backend application. A `?operator=contains&name=<FILTER>` should be transformed to `?co=<FILTER>`. This test ensures that the sideband adapter correctly transforms client query strings when requesting inbound decisions from PingDataGovernance."
					},
					"response": []
				},
				{
					"name": "Should relay response headers and pass request context correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97ec2209-f006-4e22-9579-791597aa3a69",
								"exec": [
									"pm.test(\"Should have set request-context-method\", function () {",
									"    const requestContextMethod = pm.variables.get(\"request-context-method\");",
									"    pm.expect(requestContextMethod === 'state' || requestContextMethod === 'request' || requestContextMethod === 'none').to.eq(true);",
									"});",
									"pm.test(\"Should receive a banned message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response_code).to.eql('403');",
									"    pm.expect(JSON.parse(jsonData.body).message).to.contain('banned');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b19a562a-041d-4301-9ccb-545d105f0b82",
								"exec": [
									"const requestContextMethod = pm.environment.get('request-context-method') || pm.variables.get('request-context-method');",
									"const requestBody = {",
									"    response_code: \"200\",",
									"    response_status: \"OK\",",
									"    method: \"GET\",",
									"    url: \"{{backend-base-url}}/persons/{{known-person-id}}\",",
									"    http_version: \"1.1\",",
									"    headers: [",
									"        {",
									"            \"X-Banned-Users\": \"{{banned-username}}\"",
									"        },",
									"        {",
									"            \"X-Powered-By\": \"SmartHub Server Supreme\"",
									"        }",
									"    ],",
									"    body: \"{\\\"id\\\":\\\"{{known-person-id}}\\\",\\\"name\\\":\\\"Bruce Heller\\\",\\\"username\\\":\\\"Lyla69\\\",\\\"email\\\":\\\"Geovanni_Mueller66@gmail.com\\\",\\\"phone\\\":\\\"475.765.5023 x4199\\\",\\\"website\\\":\\\"breana.info\\\",\\\"address\\\":{\\\"street\\\":\\\"Joel Via\\\",\\\"suite\\\":\\\"Suite 111\\\",\\\"city\\\":\\\"Judyville\\\",\\\"zipcode\\\":\\\"43591\\\",\\\"geo\\\":{\\\"lat\\\":\\\"-37.6256\\\",\\\"lng\\\":\\\"169.6589\\\"}},\\\"company\\\":{\\\"name\\\":\\\"Hilpert Group\\\",\\\"catchPhrase\\\":\\\"Configurable composite portal\\\",\\\"bs\\\":\\\"transform rich mindshare\\\"}}\"",
									"};",
									"switch (requestContextMethod) {",
									"    case 'state':",
									"        Object.assign(requestBody, {",
									"            state: 'H4sIAAAAAAAAAK1TTY-bMBD9K5YvvWAWAllITs1WUVupq62a7YfUVNEAU3BjMLXN7mYj_nvHJNtec6i4wJuZ5zeP5yM3-HtA6_jyyK0eTIk72fMlj2dZGNET8-AF77WhtjzKo4C36BpdUd_b9T11DEbRe-Ncv7y6UroE1Wjrltdpmlw1ukVLPb66e0Bjpe78ARN1g1ARxJffj3w1EKeRz-BOHTcIBg07bjmUTj7gli-dGTDYcjsU9LHlWTT_WUVYiCSPSpFGUSZgVoFYRBFCXs3zRZ5t-cjH4Mi_iVXfi_de82a1maDNO_F5s_5EyCVEfPwxBtzpPXZfQMkKnDY0eqvLPVuVJVrL7n2R_asGpNwXJtw7fPrcTSQ0-x9W80d4c87e8MGieeGf3PJmXbrheb2dfuzQ73aZLeepu9PQkXfQkpzLhgPK3yl23p7z5O3B6I59xYJEULZoo3NBJYnbNfBExgccW5A-dWt1sBjegtnb17XHwlK3VIeqIm6KFgXbGUTKLl87J5HdGz9JuR6k80pXvQsZhYWgUroDITcG9oN15ANhz7IvdTWtlM7jWCwWSUZwjdpzK_DEYj4PZ4vU46qrCVikYRxlMR8pM32jOz8eiyTLxXUSiyid-dMesbAnCb-gBRUW8plQkt9DRzL-GvJBOqcwYHev3uiOfg2DrmI3aGr07eDK5mNjwE67tKikNuCwYrXSBShmD9Zhy7CrJckIeEGe8AZM5yNbGFnurSBCUSr_yk5XWytdS7q3JF_6O3NZFMbxD9iHp7BRBAAA'",
									"            });",
									"        break;",
									"    case 'request':",
									"        Object.assign(requestBody, {",
									"            request: {",
									"                \"source_ip\": \"::1\",",
									"                \"source_port\": 12345,",
									"                \"method\": \"GET\",",
									"                \"url\": \"{{backend-base-url}}/persons/{{known-person-id}}\",",
									"                \"http_version\": \"1.1\",",
									"                \"headers\": [",
									"                    {",
									"                        \"Authorization\": \"Bearer {\\\"active\\\":true,\\\"sub\\\":\\\"{{banned-user-id}}\\\"}\"",
									"                    },",
									"                    {",
									"                        \"X-App-Id\": \"{{app-id}}\"",
									"                    }",
									"                ]",
									"            }",
									"        });",
									"        break;",
									"    case 'none':",
									"        requestBody.headers.push({ \"X-App-Id\": \"BAN\" });",
									"        break;",
									"};",
									"",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "PDG-TOKEN",
								"type": "text",
								"value": "{{pdg-sideband-secret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pdg-base-url}}/sideband/response",
							"host": [
								"{{pdg-base-url}}"
							],
							"path": [
								"sideband",
								"response"
							]
						},
						"description": "The test policies make sure that a banned user cannot retrieve any data. Banned person IDs are provided in a response header by the backend application. This test ensures that the sideband adapter relays response headers and the request context correctly when requesting outbound decisions."
					},
					"response": []
				},
				{
					"name": "Should transform inbound request body correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af457e84-0d52-4455-88fc-24064b027896",
								"exec": [
									"pm.test(\"Should not forward audit property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.body).to.not.contain(\"audit\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "PDG-TOKEN",
								"type": "text",
								"value": "{{pdg-sideband-secret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"source_ip\": \"::1\",\n    \"source_port\": 12345,\n    \"method\": \"PUT\",\n    \"url\": \"{{backend-base-url}}/homes/{{known-home-id}}/devices\",\n    \"http_version\": \"1.1\",\n    \"headers\": [\n        {\n            \"Authorization\": \"Bearer {\\\"active\\\":true,\\\"sub\\\":\\\"{{known-user-id}}\\\"}\"\n        },\n        {\n            \"X-App-Id\": \"{{app-id}}\"\n        }\n    ],\n    \"body\": \"{\\\"id\\\":\\\"{{known-device-id}}\\\",\\\"audit\\\": \\\"3eba0426d793ab17c00176cbdf176daa90665c68ae96f0a8e820fb0ad9e3dcc2743695f122cd1d5100d0be59d65abb122403d693a885d92ec932b28cd9d7661f\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pdg-base-url}}/sideband/request",
							"host": [
								"{{pdg-base-url}}"
							],
							"path": [
								"sideband",
								"request"
							]
						},
						"description": "The test policies `DENY` modification requests (`POST`/`PUT`/`PATCH`) without an `audit` property. The backend API is unaware of this property and considers such requests invalid, so the policies remove the property before forwarding. This test checks that the sideband adapter correctly transforms a client request body (leaving the `audit` property intact) before making an inbound PingDataGovernance request."
					},
					"response": []
				},
				{
					"name": "Should transform outbound request body correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d74c1a6c-74d8-48af-885a-50120ea578e8",
								"exec": [
									"pm.test(\"Should indicate that there are no more calls remaining\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response_code).eq(\"402\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "PDG-TOKEN",
								"type": "text",
								"value": "{{pdg-sideband-secret}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"response_code\": 200,\n    \"response_status\": \"OK\",\n    \"method\": \"PATCH\",\n    \"url\": \"{{backend-base-url}}/controls/{{known-control-id}}\",\n    \"http_version\": \"1.1\",\n    \"headers\": [\n        {\n            \"Authorization\": \"Bearer {\\\"active\\\":true,\\\"sub\\\":\\\"{{known-user-id}}\\\"}\"\n        },\n        {\n            \"X-App-Id\": \"{{app-id}}\"\n        }\n    ],\n    \"body\": \"{\\\"name\\\": \\\"power\\\", \\\"value\\\":\\\"88000\\\",\\\"status\\\":\\\"on\\\", \\\"callsRemaining\\\": 0, \\\"readOnly\\\": false}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pdg-base-url}}/sideband/response",
							"host": [
								"{{pdg-base-url}}"
							],
							"path": [
								"sideband",
								"response"
							]
						},
						"description": "The test policies have a rule that `DENY` device control state changes when the `remaining` property has reached `0`, indicating that the number of calls have exceeded the daily limit. This test expects that policy rule to trigger thereby ensuring that the sideband adapter is correctly transforming backend response bodies when making outbound requests to PingDataGovernance."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "242274fd-04ea-4835-9fa4-7da48861fd87",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fcd5aa81-57bf-47a1-853a-27342e5736c0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sideband Adapter",
			"item": [
				{
					"name": "Should correctly relay client request headers in inbound requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce94cbf-0126-4dcb-aab2-05df6b435b5d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-App-Id",
								"value": "{{app-id}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {\"active\":true,\"sub\":\"{{known-user-id}}\"}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gateway-base-url}}/homes",
							"host": [
								"{{gateway-base-url}}"
							],
							"path": [
								"homes"
							]
						},
						"description": "The test policies `DENY` client requests that are missing an `X-App-Id` header. This test makes a simple `GET` request with that header to make sure the sideband adapter correctly transforms client request headers when fetching inbound decisions from PingDataGovernance."
					},
					"response": []
				},
				{
					"name": "Should correctly include backend response headers in outbound decision request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83642ed2-6a11-4364-ad48-5bf6cc5e2f85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"X-Powered-By is not present\", function () {",
									"    pm.response.to.not.have.header(\"X-Powered-By\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-App-Id",
								"value": "{{app-id}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {\"active\":true,\"sub\":\"{{known-user-id}}\"}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gateway-base-url}}/devices",
							"host": [
								"{{gateway-base-url}}"
							],
							"path": [
								"devices"
							]
						},
						"description": "The policies remove the `X-Powered-By` header returned by the backend API. This test retrieves a list of devices to make sure that the sideband adapter correctly relays response headers when requesting outbound decisions from PingDataGovernance."
					},
					"response": []
				},
				{
					"name": "Should correctly transform client query string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f1afd6f-856f-462a-bd2b-a687f1cd2f03",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"At least one device\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).greaterThan(0);",
									"});",
									"pm.test(\"Each device name has 'sedan' in it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.map(device => device.name.toLowerCase()).reduce((acc, name) => (name.indexOf(\"sedan\") === -1 ? false : acc), true)).eq(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-App-Id",
								"value": "{{app-id}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {\"active\":true,\"sub\":\"{{known-user-id}}\"}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gateway-base-url}}/devices?name=sedan&operator=contains",
							"host": [
								"{{gateway-base-url}}"
							],
							"path": [
								"devices"
							],
							"query": [
								{
									"key": "name",
									"value": "sedan"
								},
								{
									"key": "operator",
									"value": "contains"
								}
							]
						},
						"description": "The test policies convert incoming query strings to the format used by the backend application. A `?operator=contains&name=<FILTER>` should be transformed to `?co=<FILTER>`. This test ensures that the sideband adapter correctly transforms client query strings when requesting inbound decisions from PingDataGovernance."
					},
					"response": []
				},
				{
					"name": "Should relay response headers and pass request state correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4730f246-d241-4428-92fc-1a2220854110",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Message contains 'banned'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain(\"banned\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41b139b2-93f3-45f0-8019-c3dbdb75018a",
								"exec": [
									"const requestContextMethod = pm.environment.get('request-context-method') || pm.variables.get(\"request-context-method\");",
									"if (requestContextMethod === 'none') {",
									"",
									"    // Force the policies to consider this request banned",
									"    pm.variables.set('app-id', 'BAN');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-App-Id",
								"value": "{{app-id}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {\"active\":true,\"sub\":\"{{banned-user-id}}\"}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gateway-base-url}}/persons/{{known-person-id}}",
							"host": [
								"{{gateway-base-url}}"
							],
							"path": [
								"persons",
								"{{known-person-id}}"
							]
						},
						"description": "The test policies make sure that a banned user cannot retrieve any data. Banned person IDs are provided in a response header by the backend application. This test ensures that the sideband adapter relays response headers and the token owner `state` correctly when requesting outbound decisions."
					},
					"response": []
				},
				{
					"name": "Should transform inbound request body correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3edd7128-b235-4dd9-b6a2-257718bef01f",
								"exec": [
									"pm.test(\"Should be a home entity with the newly linked device\", function () {",
									"    const knownDeviceId = pm.variables.get(\"known-device-id\");",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.devices.map(device => device.id).reduce((acc, id) => knownDeviceId === id ? true: acc), false).to.eq(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-App-Id",
								"value": "{{app-id}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {\"active\":true,\"sub\":\"{{known-user-id}}\"}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{known-device-id}}\",\n    \"audit\": \"3eba0426d793ab17c00176cbdf176daa90665c68ae96f0a8e820fb0ad9e3dcc2743695f122cd1d5100d0be59d65abb122403d693a885d92ec932b28cd9d7661f\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway-base-url}}/homes/{{known-home-id}}/devices",
							"host": [
								"{{gateway-base-url}}"
							],
							"path": [
								"homes",
								"{{known-home-id}}",
								"devices"
							]
						},
						"description": "The test policies `DENY` modification requests (`POST`/`PUT`/`PATCH`) without an `audit` property. The backend API is unaware of this property and considers such requests invalid, so the policies remove the property before forwarding. This test checks that the sideband adapter correctly transforms a client request body (leaving the `audit` property intact) before making an inbound PingDataGovernance request."
					},
					"response": []
				},
				{
					"name": "Should transform outbound request body correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0114fd86-85e6-4ef4-999d-39cce9ad051a",
								"exec": [
									"pm.test(\"Status code is 402\", function () {",
									"    pm.response.to.have.status(402);",
									"});",
									"pm.test(\"Should indicate that there are no more calls remaining\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain(\"limit\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-App-Id",
								"value": "{{app-id}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {\"active\":true,\"sub\":\"{{known-user-id}}\"}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"power\",\n    \"value\": \"88000\",\n    \"status\": \"on\",\n    \"callsRemaining\": 10,\n    \"audit\": \"3eba0426d793ab17c00176cbdf176daa90665c68ae96f0a8e820fb0ad9e3dcc2743695f122cd1d5100d0be59d65abb122403d693a885d92ec932b28cd9d7661f\",\n    \"readOnly\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway-base-url}}/controls/{{known-control-id}}",
							"host": [
								"{{gateway-base-url}}"
							],
							"path": [
								"controls",
								"{{known-control-id}}"
							]
						},
						"description": "The test policies have a rule that `DENY` device control state changes when the `remaining` property has reached `0`, indicating that the number of calls have exceeded the daily limit. This test expects that policy rule to trigger thereby ensuring that the sideband adapter is correctly transforming backend response bodies when making outbound requests to PingDataGovernance."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3edd213c-9a69-48a2-b5c3-3c2da8fe9ab4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a6ccee8a-6bdc-4778-af98-47f9783364c3",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response is valid JSON\", function () {",
					"    var jsonData = pm.response.json();",
					"    typeof jsonData === 'object';",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "0cddf687-291b-4e66-9324-56eac015f7d5",
			"key": "backend-base-url",
			"value": "http://localhost:6443"
		},
		{
			"id": "3a87d86e-c455-4656-b1c3-e5bc263b0dfe",
			"key": "gateway-base-url",
			"value": "http://localhost:8080"
		},
		{
			"id": "aaa11ff3-7555-4dbc-8fda-f82cf170bafa",
			"key": "pdg-base-url",
			"value": "https://localhost:7443"
		},
		{
			"id": "5eefe612-fff2-4153-88ea-79567f93b5cd",
			"key": "pdg-sideband-secret",
			"value": "5e96eaf6-251e-4555-9434-d1b224f05e99"
		},
		{
			"id": "c8dec6e4-bfbf-4ba9-af31-4166d3410368",
			"key": "known-person-id",
			"value": "7d9fc465-ec1a-460c-ab38-435471f4918b"
		},
		{
			"id": "cf4a0b8d-1c16-480d-a588-32d49ae68eef",
			"key": "known-home-id",
			"value": "5b99ccf0-a164-4472-baae-6243768f0a5b"
		},
		{
			"id": "57d29100-a11d-47ad-9cbf-998bc4df1e87",
			"key": "known-user-id",
			"value": "7d9fc465-ec1a-460c-ab38-435471f4918b"
		},
		{
			"id": "088ffc4f-87ac-4129-b63b-28ed13085bc0",
			"key": "banned-user-id",
			"value": "705fd0eb-380c-4007-a2da-900ea8d58987"
		},
		{
			"id": "124481c6-a83c-455b-84dc-45c1cc39cfb4",
			"key": "banned-username",
			"value": "l33t_haxor"
		},
		{
			"id": "3ec2c834-8b70-45dd-a729-3a560da27b29",
			"key": "known-device-id",
			"value": "83f6e6ae-96fe-4ba9-9480-88a3a33a7add"
		},
		{
			"id": "def25557-9b9c-478e-a412-1442d2ab40af",
			"key": "known-control-id",
			"value": "1da1a20f-6707-40b3-a2af-a6bc9054b640"
		},
		{
			"id": "47bdc348-6258-48cd-8b8d-d2df62b97330",
			"key": "request-context-method",
			"value": "state"
		},
		{
			"id": "264be154-1191-4d4a-a33f-823c28f949bb",
			"key": "app-id",
			"value": "SRD"
		}
	],
	"protocolProfileBehavior": {}
}